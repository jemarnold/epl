[{"path":"https://jemarnold.github.io/epl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 epl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"specify-file-path","dir":"Articles","previous_headings":"","what":"Specify file path","title":"Reading and Cleaning Data","text":"ways point data file. data files R script root folder (Rstudio project folder), able use implicit file path, e.g.: \"./raw_data/my_file.csv\". data file elsewhere, need define full path explicitly, e.g.: {epl} includes example data files can used test included functions:","code":"file.path(\"~\", \"my_folder\", \"raw_data\", \"my_file.csv\") #> [1] \"~/my_folder/raw_data/my_file.csv\" ## calling `example_epl()` will return a list of all included example files example_epl() #> [1] \"parvo_binned.CSV\"  \"parvo_bxb.CSV\"     \"parvo_ramp.CSV\" #> [4] \"tymewear_live.csv\" \"tymewear_post.csv\"  ## partial matching will error if matches multiple example_epl(\"parvo\") #> Error in `example_epl()`: #> ! Multiple files match \"parvo\": #> ℹ Matching files: \"parvo_binned.CSV\", \"parvo_bxb.CSV\", and \"parvo_ramp.CSV\"  ## calling a specific file by name will return the file path ## partial string matching works for uniquely identifiable file names file_path <- example_epl(\"parvo_binned\") file_path #> [1] \"C:/Program Files/R/R-4.5.1/library/epl/extdata/parvo_binned.csv\""},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"example_epl","dir":"Articles","previous_headings":"","what":"example_epl()","title":"Reading and Cleaning Data","text":"{epl} includes example data files can used test included functions:","code":"## calling `example_epl()` will return a list of all included example files example_epl() #> [1] \"parvo_binned.CSV\"  \"parvo_bxb.CSV\"     \"parvo_ramp.CSV\" #> [4] \"tymewear_live.csv\" \"tymewear_post.csv\"  ## partial matching will error if matches multiple example_epl(\"parvo\") #> Error in `example_epl()`: #> ! Multiple files match \"parvo\": #> ℹ Matching files: \"parvo_binned.CSV\", \"parvo_bxb.CSV\", and \"parvo_ramp.CSV\"  ## calling a specific file by name will return the file path ## partial string matching works for uniquely identifiable file names file_path <- example_epl(\"parvo_binned\") file_path #> [1] \"C:/Program Files/R/R-4.5.1/library/epl/extdata/parvo_binned.csv\""},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"reading-file-data","dir":"Articles","previous_headings":"","what":"Reading file data","title":"Reading and Cleaning Data","text":"function read .CSV .xlsx (.XLS) files exported Parvo Medics TrueOne 2400 metabolic cart. read_parvo() won’t work exported .XSL data exported .XSL file format obsolete easily read R. files need re-saved .xlsx read. recommend exporting .CSV reason. read_parvo() two simple arguments: file_path: takes character string data file path, defined . add_timestamp: gives option add timestamp (time day) column datetime format based file recording start time. file start time accurate nearest second (± 0.5 sec precision) long Parvo system time accurate first place. always true. output function list three data frames: parvo$data: contains recorded raw data samples exported data channels (e.g. c(\"VO2\", \"VCO2\", \"RR\", \"Vt\")) calculated metabolic values (e.g. c(\"O2kJ\", \"O2kcal\", \"Paer\", \"METS\"); see ?read_parvo details calculated values). parvo$details: contains file details & metadata, including c(\"Date\", \"Name\", \"Sex\", \"Age\") (metric SI units ). parvo$events: contains manually entered events time seconds event descriptions. function read “Live Processed CSV” “Post Processed CSV” files exported Tymewear VitalPro chest strap. read_tymewear() one argument: file_path: , character string file path. output function list two data frames: tyme$data: contains recorded raw data samples breathing rate, tidal volume, ventilation: c(\"br\", \"vt\", \"ve\"), time seconds timestamps datetime format. tyme$details: contains file details & metadata, including c(\"gender\", \"weight\", \"date\", \"app-start-time\"). “long” format, whereas parvo details “wide” format.","code":"parvo <- read_parvo(file_path = file_path, add_timestamp = TRUE) parvo #> $data #> # A tibble: 179 × 26 #>     TIME timestamp              HR VO2kg   VO2  VCO2   RER    RR    Vt    VE #>    <dbl> <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  18.1 2025-10-23 10:50:23     0  5.69 0.404 0.419 1.04   13.3 1.11  12.1  #>  2  31.5 2025-10-23 10:50:36     0  6.80 0.483 0.484 1.00   17.8 0.993 14.5  #>  3  49.5 2025-10-23 10:50:54   107  6.08 0.432 0.448 1.04   10.0 1.66  13.6  #>  4  62.5 2025-10-23 10:51:07   107  4.06 0.288 0.321 1.11   13.8 0.816  9.27 #>  5  77.5 2025-10-23 10:51:22   107  8.61 0.611 0.648 1.06   16.0 1.28  16.8  #>  6  94.9 2025-10-23 10:51:39   107  7.52 0.534 0.528 0.990  13.8 1.15  13.0  #>  7 107.  2025-10-23 10:51:51   107  6.80 0.483 0.514 1.06   15.0 1.10  13.6  #>  8 123.  2025-10-23 10:52:08   107  5.94 0.422 0.454 1.08   11.2 1.33  12.2  #>  9 138.  2025-10-23 10:52:23   107  2.47 0.175 0.186 1.06   16.0 0.392  5.13 #> 10 153.  2025-10-23 10:52:37   107  3.92 0.278 0.294 1.06   12.1 0.845  8.42 #> # ℹ 169 more rows #> # ℹ 16 more variables: VEVO2 <dbl>, VEVCO2 <dbl>, FEO2 <dbl>, FECO2 <dbl>, #> #   FATmin <dbl>, CHOmin <dbl>, Breath <dbl>, FatOx <dbl>, CarbOx <dbl>, #> #   O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, O2energy <dbl>, O2power <dbl>, #> #   O2pulse <dbl>, METS <dbl> #>  #> $details #> # A tibble: 1 × 16 #>   Date             Name  Sex     Age Height Weight `Insp. temp` `Baro. pressure` #>   <chr>            <chr> <chr> <dbl>  <dbl>  <dbl>        <dbl>            <dbl> #> 1 2025-10-23 10:5… TW02  Male      0    176     71         23.6             755. #> # ℹ 8 more variables: `Insp. humidity` <dbl>, `STPD to BTPS` <dbl>, #> #   `O2 Gain` <dbl>, `CO2 Gain` <dbl>, `Base O2` <dbl>, `Base CO2` <dbl>, #> #   `Measured O2` <dbl>, `Measured CO2` <dbl> #>  #> $events #> # A tibble: 23 × 2 #>     TIME Events         #>    <dbl> <chr>          #>  1   240 Start Exercise #>  2   240 UP1 265W       #>  3   540 Stop Exercise  #>  4   540 Cadence 95     #>  5   900 Start Exercise #>  6   900 RP2 265W       #>  7  1200 Stop Exercise  #>  8  1200 RPE 6-20 15    #>  9  1200 Cadence 95     #> 10  1440 Start Exercise #> # ℹ 13 more rows tymelive <- read_tymewear(example_epl(\"tymewear_live\")) tymelive #> $data #> # A tibble: 1,083 × 5 #>     time timestamp              br    vt    ve #>    <dbl> <dttm>              <dbl> <dbl> <dbl> #>  1  0    2025-10-23 10:50:11  12.7  1.35    17 #>  2  4.14 2025-10-23 10:50:15  14.9  1.35    20 #>  3  7.95 2025-10-23 10:50:18  15    1.05    16 #>  4 13.0  2025-10-23 10:50:24  13.8  2.4     33 #>  5 17.2  2025-10-23 10:50:28  13.3  1.11    15 #>  6 21.2  2025-10-23 10:50:32  12.8  1.63    21 #>  7 25.7  2025-10-23 10:50:36  13    3.61    47 #>  8 33.9  2025-10-23 10:50:44  11.9  5.88    70 #>  9 39.3  2025-10-23 10:50:50   8    1.14     9 #> 10 44.7  2025-10-23 10:50:55  10    2.21    22 #> # ℹ 1,073 more rows #>  #> $details #> # A tibble: 60 × 2 #>    parameter     value    #>    <chr>         <chr>    #>  1 Info Section  \"\"       #>  2 type          \"0\"      #>  3 stages        \"[]\"     #>  4 gender        \"Female\" #>  5 weight        \"64.0\"   #>  6 weight_units  \"SI\"     #>  7 activity-name \"TW02\"   #>  8 f_v           \"1.0\"    #>  9 activity-type \"0\"      #> 10 sport         \"2\"      #> # ℹ 50 more rows"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"read_parvo","dir":"Articles","previous_headings":"","what":"read_parvo()","title":"Reading and Cleaning Data","text":"function read .CSV .xlsx (.XLS) files exported Parvo Medics TrueOne 2400 metabolic cart. read_parvo() won’t work exported .XSL data exported .XSL file format obsolete easily read R. files need re-saved .xlsx read. recommend exporting .CSV reason. read_parvo() two simple arguments: file_path: takes character string data file path, defined . add_timestamp: gives option add timestamp (time day) column datetime format based file recording start time. file start time accurate nearest second (± 0.5 sec precision) long Parvo system time accurate first place. always true. output function list three data frames: parvo$data: contains recorded raw data samples exported data channels (e.g. c(\"VO2\", \"VCO2\", \"RR\", \"Vt\")) calculated metabolic values (e.g. c(\"O2kJ\", \"O2kcal\", \"Paer\", \"METS\"); see ?read_parvo details calculated values). parvo$details: contains file details & metadata, including c(\"Date\", \"Name\", \"Sex\", \"Age\") (metric SI units ). parvo$events: contains manually entered events time seconds event descriptions.","code":"parvo <- read_parvo(file_path = file_path, add_timestamp = TRUE) parvo #> $data #> # A tibble: 179 × 26 #>     TIME timestamp              HR VO2kg   VO2  VCO2   RER    RR    Vt    VE #>    <dbl> <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  18.1 2025-10-23 10:50:23     0  5.69 0.404 0.419 1.04   13.3 1.11  12.1  #>  2  31.5 2025-10-23 10:50:36     0  6.80 0.483 0.484 1.00   17.8 0.993 14.5  #>  3  49.5 2025-10-23 10:50:54   107  6.08 0.432 0.448 1.04   10.0 1.66  13.6  #>  4  62.5 2025-10-23 10:51:07   107  4.06 0.288 0.321 1.11   13.8 0.816  9.27 #>  5  77.5 2025-10-23 10:51:22   107  8.61 0.611 0.648 1.06   16.0 1.28  16.8  #>  6  94.9 2025-10-23 10:51:39   107  7.52 0.534 0.528 0.990  13.8 1.15  13.0  #>  7 107.  2025-10-23 10:51:51   107  6.80 0.483 0.514 1.06   15.0 1.10  13.6  #>  8 123.  2025-10-23 10:52:08   107  5.94 0.422 0.454 1.08   11.2 1.33  12.2  #>  9 138.  2025-10-23 10:52:23   107  2.47 0.175 0.186 1.06   16.0 0.392  5.13 #> 10 153.  2025-10-23 10:52:37   107  3.92 0.278 0.294 1.06   12.1 0.845  8.42 #> # ℹ 169 more rows #> # ℹ 16 more variables: VEVO2 <dbl>, VEVCO2 <dbl>, FEO2 <dbl>, FECO2 <dbl>, #> #   FATmin <dbl>, CHOmin <dbl>, Breath <dbl>, FatOx <dbl>, CarbOx <dbl>, #> #   O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, O2energy <dbl>, O2power <dbl>, #> #   O2pulse <dbl>, METS <dbl> #>  #> $details #> # A tibble: 1 × 16 #>   Date             Name  Sex     Age Height Weight `Insp. temp` `Baro. pressure` #>   <chr>            <chr> <chr> <dbl>  <dbl>  <dbl>        <dbl>            <dbl> #> 1 2025-10-23 10:5… TW02  Male      0    176     71         23.6             755. #> # ℹ 8 more variables: `Insp. humidity` <dbl>, `STPD to BTPS` <dbl>, #> #   `O2 Gain` <dbl>, `CO2 Gain` <dbl>, `Base O2` <dbl>, `Base CO2` <dbl>, #> #   `Measured O2` <dbl>, `Measured CO2` <dbl> #>  #> $events #> # A tibble: 23 × 2 #>     TIME Events         #>    <dbl> <chr>          #>  1   240 Start Exercise #>  2   240 UP1 265W       #>  3   540 Stop Exercise  #>  4   540 Cadence 95     #>  5   900 Start Exercise #>  6   900 RP2 265W       #>  7  1200 Stop Exercise  #>  8  1200 RPE 6-20 15    #>  9  1200 Cadence 95     #> 10  1440 Start Exercise #> # ℹ 13 more rows"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"read_tymewear","dir":"Articles","previous_headings":"","what":"read_tymewear()","title":"Reading and Cleaning Data","text":"function read “Live Processed CSV” “Post Processed CSV” files exported Tymewear VitalPro chest strap. read_tymewear() one argument: file_path: , character string file path. output function list two data frames: tyme$data: contains recorded raw data samples breathing rate, tidal volume, ventilation: c(\"br\", \"vt\", \"ve\"), time seconds timestamps datetime format. tyme$details: contains file details & metadata, including c(\"gender\", \"weight\", \"date\", \"app-start-time\"). “long” format, whereas parvo details “wide” format.","code":"tymelive <- read_tymewear(example_epl(\"tymewear_live\")) tymelive #> $data #> # A tibble: 1,083 × 5 #>     time timestamp              br    vt    ve #>    <dbl> <dttm>              <dbl> <dbl> <dbl> #>  1  0    2025-10-23 10:50:11  12.7  1.35    17 #>  2  4.14 2025-10-23 10:50:15  14.9  1.35    20 #>  3  7.95 2025-10-23 10:50:18  15    1.05    16 #>  4 13.0  2025-10-23 10:50:24  13.8  2.4     33 #>  5 17.2  2025-10-23 10:50:28  13.3  1.11    15 #>  6 21.2  2025-10-23 10:50:32  12.8  1.63    21 #>  7 25.7  2025-10-23 10:50:36  13    3.61    47 #>  8 33.9  2025-10-23 10:50:44  11.9  5.88    70 #>  9 39.3  2025-10-23 10:50:50   8    1.14     9 #> 10 44.7  2025-10-23 10:50:55  10    2.21    22 #> # ℹ 1,073 more rows #>  #> $details #> # A tibble: 60 × 2 #>    parameter     value    #>    <chr>         <chr>    #>  1 Info Section  \"\"       #>  2 type          \"0\"      #>  3 stages        \"[]\"     #>  4 gender        \"Female\" #>  5 weight        \"64.0\"   #>  6 weight_units  \"SI\"     #>  7 activity-name \"TW02\"   #>  8 f_v           \"1.0\"    #>  9 activity-type \"0\"      #> 10 sport         \"2\"      #> # ℹ 50 more rows"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"clean-and-filter-data","dir":"Articles","previous_headings":"","what":"Clean and filter data","title":"Reading and Cleaning Data","text":"function can detect local outliers vector data replace either NA local median value. x: takes numeric vector search along local outliers. width: defines window around either side target observation idx. e.g., width = 7 defines window -7 < idx < 7 around target observation. Note Empirically, width = 7 seems suitable breath--breath ventilatory data, however can modified depending data target response signal. method: defines local outliers replaced; either “median” local median value (default), “NA” remove outlier leave missing NA value. See ?replace_outliers information.  <development 0.2.0> function used detect peak average value across certain time span, return means data columns within rows included time span. commonly, used find e.g. 30-second V̇O2peak. data: function works data frame least x y column. take data frame, apply processing data channels specified, return processed data frame. x: name “time” column. y: name target value detect peaks , e.g. “VO2”. span: timespan (units x; .e., seconds) calculate rolling local means, find peak value y. Note span = 30 sec default common timespan calculating V̇O2peak. : can optionally specify sub-range x (time values) look peak value. See ?find_peaks details.","code":"tyme_data <- tymelive$data  ## filter breathing rate vector data for local outliers vt_filtered <- replace_outliers(tyme_data$vt, width = 7, method = \"median\")  ## plot raw signal and highlight outliers  ## (see below for details about plotting) ggplot(tyme_data) +     aes(x = time, y = vt) +     ylab(\"Tidal Volume (L)\") +     scale_x_continuous(         name = \"Time (mm:ss)\",         breaks = breaks_timespan(),         labels = format_hmmss     ) +     scale_colour_epl() +     geom_line(aes(colour = \"BR\")) +     geom_point(         data = slice(tyme_data, which(vt_filtered != vt)),         aes(y = vt, colour = \"outliers\")     ) ## to replace outliers from all channels in a data frame ## using {tidyverse} {dplyr} grammar tyme_clean <- tyme_data |>      mutate(         across(c(br, vt, ve), \\(.x) replace_outliers(.x, 7))     )  ## check relative (%) effect of removing outliers on reduced signal SD 1 - sd(tyme_clean$vt) / sd(tyme_data$vt) #> [1] 0.08497033  ## and reduced sample noise 1 - mean(abs(diff(tyme_clean$vt))) / mean(abs(diff(tyme_data$vt))) #> [1] 0.2466022 ## read data from example ramp test ramp_data <- read_parvo(example_epl(\"parvo_ramp\"))$data  peak_data <- find_peaks(     ramp_data,      x = \"TIME\", ## assign `x` and `y` values     y = \"VO2\",      span = 30, ## find peak mean values within a 30-sec timespan     between = c(1500, 2000) ## restrict the range in which to look for peaks ) peak_data #> # A tibble: 1 × 25 #>   samples  TIME    HR VO2kg   VO2  VCO2   RER    RR    Vt    VE VEVO2 VEVCO2 #>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1       1 1770.   222  49.9  3.65  4.18  1.14  46.7  2.88  110.  36.8   32.1 #> # ℹ 13 more variables: FEO2 <dbl>, FECO2 <dbl>, FATmin <dbl>, CHOmin <dbl>, #> #   FatOx <dbl>, CarbOx <dbl>, O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, #> #   O2energy <dbl>, O2power <dbl>, O2pulse <dbl>, METS <dbl>  ## retrieve VO2peak value in ml/kg/min VO2peak <- peak_data$VO2kg VO2peak #> [1] 49.94765"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"replace_outliers","dir":"Articles","previous_headings":"","what":"replace_outliers()","title":"Reading and Cleaning Data","text":"function can detect local outliers vector data replace either NA local median value. x: takes numeric vector search along local outliers. width: defines window around either side target observation idx. e.g., width = 7 defines window -7 < idx < 7 around target observation. Note Empirically, width = 7 seems suitable breath--breath ventilatory data, however can modified depending data target response signal. method: defines local outliers replaced; either “median” local median value (default), “NA” remove outlier leave missing NA value. See ?replace_outliers information.","code":"tyme_data <- tymelive$data  ## filter breathing rate vector data for local outliers vt_filtered <- replace_outliers(tyme_data$vt, width = 7, method = \"median\")  ## plot raw signal and highlight outliers  ## (see below for details about plotting) ggplot(tyme_data) +     aes(x = time, y = vt) +     ylab(\"Tidal Volume (L)\") +     scale_x_continuous(         name = \"Time (mm:ss)\",         breaks = breaks_timespan(),         labels = format_hmmss     ) +     scale_colour_epl() +     geom_line(aes(colour = \"BR\")) +     geom_point(         data = slice(tyme_data, which(vt_filtered != vt)),         aes(y = vt, colour = \"outliers\")     ) ## to replace outliers from all channels in a data frame ## using {tidyverse} {dplyr} grammar tyme_clean <- tyme_data |>      mutate(         across(c(br, vt, ve), \\(.x) replace_outliers(.x, 7))     )  ## check relative (%) effect of removing outliers on reduced signal SD 1 - sd(tyme_clean$vt) / sd(tyme_data$vt) #> [1] 0.08497033  ## and reduced sample noise 1 - mean(abs(diff(tyme_clean$vt))) / mean(abs(diff(tyme_data$vt))) #> [1] 0.2466022"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"filter_data","dir":"Articles","previous_headings":"","what":"filter_data()","title":"Reading and Cleaning Data","text":"<development 0.2.0>","code":""},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"find_peaks","dir":"Articles","previous_headings":"","what":"find_peaks()","title":"Reading and Cleaning Data","text":"function used detect peak average value across certain time span, return means data columns within rows included time span. commonly, used find e.g. 30-second V̇O2peak. data: function works data frame least x y column. take data frame, apply processing data channels specified, return processed data frame. x: name “time” column. y: name target value detect peaks , e.g. “VO2”. span: timespan (units x; .e., seconds) calculate rolling local means, find peak value y. Note span = 30 sec default common timespan calculating V̇O2peak. : can optionally specify sub-range x (time values) look peak value. See ?find_peaks details.","code":"## read data from example ramp test ramp_data <- read_parvo(example_epl(\"parvo_ramp\"))$data  peak_data <- find_peaks(     ramp_data,      x = \"TIME\", ## assign `x` and `y` values     y = \"VO2\",      span = 30, ## find peak mean values within a 30-sec timespan     between = c(1500, 2000) ## restrict the range in which to look for peaks ) peak_data #> # A tibble: 1 × 25 #>   samples  TIME    HR VO2kg   VO2  VCO2   RER    RR    Vt    VE VEVO2 VEVCO2 #>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1       1 1770.   222  49.9  3.65  4.18  1.14  46.7  2.88  110.  36.8   32.1 #> # ℹ 13 more variables: FEO2 <dbl>, FECO2 <dbl>, FATmin <dbl>, CHOmin <dbl>, #> #   FatOx <dbl>, CarbOx <dbl>, O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, #> #   O2energy <dbl>, O2power <dbl>, O2pulse <dbl>, METS <dbl>  ## retrieve VO2peak value in ml/kg/min VO2peak <- peak_data$VO2kg VO2peak #> [1] 49.94765"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Reading and Cleaning Data","text":"package includes clean plot template colour palette ggplot2, data visualisation engine choice R. already seen basics looks like. key function theme_epl(), can called top script theme_set(theme_epl()) (done top page) set plot defaults. can called within individual plot, . theme_epl() following arguments, addition able take theme() arguments ggplot settings: base_size numeric font size, defaults 14. base_family font used, defaults Arial “sans”. Another nice alternative font install use “Merriweather Sans”, available Google fonts. border specifies either “partial” (default) “full” border around plot panel. settings usually fine leave default. See ?theme_epl details.  palette_epl() includes nice colours can called individually - e.g.: scale_colour_manual(values = palette_epl()[1:2]) - default palette built scale_colour_epl() (used two plots ). See ?scale_colour_epl options.  Time values x-axis can displayed “h:mm:ss” units format_hmmss(), breaks set pretty time-ish values (e.g. 60-second 5-minute (300 sec) increments) breaks_timespan(), used plots . See respective help documentation details.","code":"## explore what each setting does to the aesthetics of the plot ggplot(ramp_data) +     aes(x = TIME) +     labs(title = expression( ## use `expression` for special symbols         Incremental~Ramp~and~dot(V)*O['2']~Verification~Assessment     )) +     coord_cartesian(ylim = c(0, NA)) + ## set plot x- & y-axis limits     scale_x_continuous( ## parameters for the x-axis         name = \"Time (mm:ss)\",         breaks = breaks_timespan(), ## pretty time x-axis formatting         labels = format_hmmss ## pretty time x-axis formatting (see below)     ) +     scale_y_continuous( ## parameters for the y-axis         name = expression(bold( ## use `expression` for special symbols             dot(V)*O['2']~~'|'~~dot(V)*CO['2']~'('*L%.%min^'-1'*')'         )),         expand = expansion(mult = 0) ## adjust space above/below max/min     ) +     scale_colour_manual( ## set the colour mapping         name = NULL,         aesthetics = c(\"colour\", \"fill\"), ## for both colour & fill         ## set custom colours (see below)         values = setNames(palette_epl()[c(6, 5)], c(\"VO2\", \"VCO2\")),      ) +     guides(         colour = guide_legend(override.aes = list(             linewidth = 1, alpha = 1 ## modify the legend keys         ))     ) +     geom_area(aes(y = VO2, colour = \"VO2\", fill = \"VO2\"),                alpha = 0.1, key_glyph = \"path\") +     geom_line(aes(y = VCO2, colour = \"VCO2\")) +     geom_point(data = peak_data, aes(x = TIME, y = VO2),                size = 4, shape = 21, stroke = 1) ## visualise the colour palette scales::show_col(palette_epl())"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"theme_epl","dir":"Articles","previous_headings":"","what":"theme_epl()","title":"Reading and Cleaning Data","text":"package includes clean plot template colour palette ggplot2, data visualisation engine choice R. already seen basics looks like. key function theme_epl(), can called top script theme_set(theme_epl()) (done top page) set plot defaults. can called within individual plot, . theme_epl() following arguments, addition able take theme() arguments ggplot settings: base_size numeric font size, defaults 14. base_family font used, defaults Arial “sans”. Another nice alternative font install use “Merriweather Sans”, available Google fonts. border specifies either “partial” (default) “full” border around plot panel. settings usually fine leave default. See ?theme_epl details.","code":"## explore what each setting does to the aesthetics of the plot ggplot(ramp_data) +     aes(x = TIME) +     labs(title = expression( ## use `expression` for special symbols         Incremental~Ramp~and~dot(V)*O['2']~Verification~Assessment     )) +     coord_cartesian(ylim = c(0, NA)) + ## set plot x- & y-axis limits     scale_x_continuous( ## parameters for the x-axis         name = \"Time (mm:ss)\",         breaks = breaks_timespan(), ## pretty time x-axis formatting         labels = format_hmmss ## pretty time x-axis formatting (see below)     ) +     scale_y_continuous( ## parameters for the y-axis         name = expression(bold( ## use `expression` for special symbols             dot(V)*O['2']~~'|'~~dot(V)*CO['2']~'('*L%.%min^'-1'*')'         )),         expand = expansion(mult = 0) ## adjust space above/below max/min     ) +     scale_colour_manual( ## set the colour mapping         name = NULL,         aesthetics = c(\"colour\", \"fill\"), ## for both colour & fill         ## set custom colours (see below)         values = setNames(palette_epl()[c(6, 5)], c(\"VO2\", \"VCO2\")),      ) +     guides(         colour = guide_legend(override.aes = list(             linewidth = 1, alpha = 1 ## modify the legend keys         ))     ) +     geom_area(aes(y = VO2, colour = \"VO2\", fill = \"VO2\"),                alpha = 0.1, key_glyph = \"path\") +     geom_line(aes(y = VCO2, colour = \"VCO2\")) +     geom_point(data = peak_data, aes(x = TIME, y = VO2),                size = 4, shape = 21, stroke = 1)"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"palette_epl","dir":"Articles","previous_headings":"","what":"palette_epl()","title":"Reading and Cleaning Data","text":"palette_epl() includes nice colours can called individually - e.g.: scale_colour_manual(values = palette_epl()[1:2]) - default palette built scale_colour_epl() (used two plots ). See ?scale_colour_epl options.","code":"## visualise the colour palette scales::show_col(palette_epl())"},{"path":"https://jemarnold.github.io/epl/articles/reading-and-cleaning-data.html","id":"other-ggplot2-helper-functions","dir":"Articles","previous_headings":"","what":"Other {ggplot2} helper functions","title":"Reading and Cleaning Data","text":"Time values x-axis can displayed “h:mm:ss” units format_hmmss(), breaks set pretty time-ish values (e.g. 60-second 5-minute (300 sec) increments) breaks_timespan(), used plots . See respective help documentation details.","code":""},{"path":"https://jemarnold.github.io/epl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jem Arnold. Author, maintainer.","code":""},{"path":"https://jemarnold.github.io/epl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Arnold J (2025). epl: Functions Scripts UBC Environmental Physiology Laboratory. R package version 0.2.1, https://jemarnold.github.io/epl/.","code":"@Manual{,   title = {epl: Functions and Scripts for the UBC Environmental Physiology Laboratory},   author = {Jem Arnold},   year = {2025},   note = {R package version 0.2.1},   url = {https://jemarnold.github.io/epl/}, }"},{"path":"https://jemarnold.github.io/epl/index.html","id":"epl","dir":"","previous_headings":"","what":"Functions and Scripts for the UBC Environmental Physiology Laboratory","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"{epl} repository functions scripts common tasks use students UBC Environmental Physiology Laboratory.","code":""},{"path":"https://jemarnold.github.io/epl/index.html","id":"website","dir":"","previous_headings":"","what":"Website","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"information vignettes usage, please visit package website.","code":""},{"path":"https://jemarnold.github.io/epl/index.html","id":"online-app","dir":"","previous_headings":"","what":"Online App","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"rudimentary implementation {epl} functions available Shiny app read, clean, plot, download Parvo metabolic data.","code":""},{"path":"https://jemarnold.github.io/epl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"can install development version {epl} GitHub :","code":"## install.packages(\"remotes\") remotes::install_github(\"jemarnold/epl\")  ## explicitly request vignettes remotes::install_github(\"jemarnold/epl\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":"https://jemarnold.github.io/epl/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"","code":"library(tidyr, warn.conflicts = FALSE) library(dplyr, warn.conflicts = FALSE) library(ggplot2) library(epl)  theme_set(theme_epl())"},{"path":"https://jemarnold.github.io/epl/index.html","id":"example_epl","dir":"","previous_headings":"Usage","what":"example_epl()","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"helper function can used retrieve example data files included {epl} test processing functions.","code":"example_epl() #> [1] \"parvo_binned.CSV\"  \"parvo_bxb.CSV\"     \"tymewear_live.csv\" #> [4] \"tymewear_post.csv\"  example_epl(\"parvo_binned\") #> [1] \"C:/Program Files/R/R-4.5.1/library/epl/extdata/tymewear_live.csv\""},{"path":"https://jemarnold.github.io/epl/index.html","id":"read_parvo","dir":"","previous_headings":"Usage","what":"read_parvo()","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"","code":"parvo <- read_parvo(example_epl(\"parvo_binned\"), add_timestamp = TRUE) parvo #> $data #> # A tibble: 179 × 26 #>     TIME timestamp              HR VO2kg   VO2  VCO2   RER    RR    Vt    VE #>    <dbl> <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  18.1 2025-10-23 10:50:23     0  5.69 0.404 0.419 1.04   13.3 1.11  12.1  #>  2  31.5 2025-10-23 10:50:36     0  6.80 0.483 0.484 1.00   17.8 0.993 14.5  #>  3  49.5 2025-10-23 10:50:54   107  6.08 0.432 0.448 1.04   10.0 1.66  13.6  #>  4  62.5 2025-10-23 10:51:07   107  4.06 0.288 0.321 1.11   13.8 0.816  9.27 #>  5  77.5 2025-10-23 10:51:22   107  8.61 0.611 0.648 1.06   16.0 1.28  16.8  #>  6  94.9 2025-10-23 10:51:39   107  7.52 0.534 0.528 0.990  13.8 1.15  13.0  #>  7 107.  2025-10-23 10:51:51   107  6.80 0.483 0.514 1.06   15.0 1.10  13.6  #>  8 123.  2025-10-23 10:52:08   107  5.94 0.422 0.454 1.08   11.2 1.33  12.2  #>  9 138.  2025-10-23 10:52:23   107  2.47 0.175 0.186 1.06   16.0 0.392  5.13 #> 10 153.  2025-10-23 10:52:37   107  3.92 0.278 0.294 1.06   12.1 0.845  8.42 #> # ℹ 169 more rows #> # ℹ 16 more variables: VEVO2 <dbl>, VEVCO2 <dbl>, FEO2 <dbl>, FECO2 <dbl>, #> #   FATmin <dbl>, CHOmin <dbl>, Breath <dbl>, FatOx <dbl>, CarbOx <dbl>, #> #   O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, O2energy <dbl>, O2power <dbl>, #> #   O2pulse <dbl>, METS <dbl> #>  #> $details #> # A tibble: 1 × 16 #>   Date             Name  Sex     Age Height Weight `Insp. temp` `Baro. pressure` #>   <chr>            <chr> <chr> <dbl>  <dbl>  <dbl>        <dbl>            <dbl> #> 1 2025-10-23 10:5… TW02  Male      0    176     71         23.6             755. #> # ℹ 8 more variables: `Insp. humidity` <dbl>, `STPD to BTPS` <dbl>, #> #   `O2 Gain` <dbl>, `CO2 Gain` <dbl>, `Base O2` <dbl>, `Base CO2` <dbl>, #> #   `Measured O2` <dbl>, `Measured CO2` <dbl> #>  #> $events #> # A tibble: 23 × 2 #>     TIME Events         #>    <dbl> <chr>          #>  1   240 Start Exercise #>  2   240 UP1 265W       #>  3   540 Stop Exercise  #>  4   540 Cadence 95     #>  5   900 Start Exercise #>  6   900 RP2 265W       #>  7  1200 Stop Exercise  #>  8  1200 RPE 6-20 15    #>  9  1200 Cadence 95     #> 10  1440 Start Exercise #> # ℹ 13 more rows"},{"path":"https://jemarnold.github.io/epl/index.html","id":"read_tymewear","dir":"","previous_headings":"Usage","what":"read_tymewear()","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"","code":"tymelive <- read_tymewear(example_epl(\"tymewear_live\")) tymelive #> $data #> # A tibble: 1,083 × 5 #>     time timestamp              br    vt    ve #>    <dbl> <dttm>              <dbl> <dbl> <dbl> #>  1  0    2025-10-23 10:50:11  12.7  1.35    17 #>  2  4.14 2025-10-23 10:50:15  14.9  1.35    20 #>  3  7.95 2025-10-23 10:50:18  15    1.05    16 #>  4 13.0  2025-10-23 10:50:24  13.8  2.4     33 #>  5 17.2  2025-10-23 10:50:28  13.3  1.11    15 #>  6 21.2  2025-10-23 10:50:32  12.8  1.63    21 #>  7 25.7  2025-10-23 10:50:36  13    3.61    47 #>  8 33.9  2025-10-23 10:50:44  11.9  5.88    70 #>  9 39.3  2025-10-23 10:50:50   8    1.14     9 #> 10 44.7  2025-10-23 10:50:55  10    2.21    22 #> # ℹ 1,073 more rows #>  #> $details #> # A tibble: 60 × 2 #>    parameter     value    #>    <chr>         <chr>    #>  1 Info Section  \"\"       #>  2 type          \"0\"      #>  3 stages        \"[]\"     #>  4 gender        \"Female\" #>  5 weight        \"64.0\"   #>  6 weight_units  \"SI\"     #>  7 activity-name \"TW02\"   #>  8 f_v           \"1.0\"    #>  9 activity-type \"0\"      #> 10 sport         \"2\"      #> # ℹ 50 more rows"},{"path":"https://jemarnold.github.io/epl/index.html","id":"replace_outliers","dir":"","previous_headings":"Usage","what":"replace_outliers()","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"","code":"tyme_data <- tymelive$data  vt_filtered <- replace_outliers(tyme_data$vt, width = 7, method = \"median\")  ggplot(tyme_data) +     aes(x = time, y = vt) +     ylab(\"Tidal Volume (L)\") +     scale_x_continuous(         name = \"Time (mm:ss)\",         breaks = breaks_timespan(),         labels = format_hmmss     ) +     scale_colour_epl() +     geom_line(aes(colour = \"BR\")) +     geom_point(         data = slice(tyme_data, which(vt_filtered != vt)),         aes(y = vt, colour = \"outliers\")     )"},{"path":"https://jemarnold.github.io/epl/index.html","id":"filter_data","dir":"","previous_headings":"Usage","what":"filter_data()","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"<development>","code":""},{"path":"https://jemarnold.github.io/epl/index.html","id":"find_peaks","dir":"","previous_headings":"Usage","what":"find_peaks()","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"","code":"ramp_data <- read_parvo(example_epl(\"parvo_ramp\"))$data  peak_data <- find_peaks(     ramp_data,      x = \"TIME\",     y = \"VO2\",      span = 30,     between = c(1500, 2000) ) peak_data #> # A tibble: 1 × 25 #>   samples  TIME    HR VO2kg   VO2  VCO2   RER    RR    Vt    VE VEVO2 VEVCO2 #>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1       1 1770.   222  49.9  3.65  4.18  1.14  46.7  2.88  110.  36.8   32.1 #> # ℹ 13 more variables: FEO2 <dbl>, FECO2 <dbl>, FATmin <dbl>, CHOmin <dbl>, #> #   FatOx <dbl>, CarbOx <dbl>, O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, #> #   O2energy <dbl>, O2power <dbl>, O2pulse <dbl>, METS <dbl>  VO2peak <- peak_data$VO2kg VO2peak #> [1] 49.94765"},{"path":"https://jemarnold.github.io/epl/index.html","id":"theme_epl--custom-ggplot2-plotting-functions","dir":"","previous_headings":"Usage","what":"theme_epl() & custom {ggplot2} plotting functions","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"","code":"ggplot(ramp_data) +     aes(x = TIME) +     labs(title = expression(         Incremental~Ramp~and~dot(V)*O['2']~Verification~Assessment     )) +     coord_cartesian(ylim = c(0, NA)) +     theme(         panel.grid.major.y = element_line()     ) +     scale_x_continuous(         name = \"Time (mm:ss)\",         breaks = breaks_timespan(),         labels = format_hmmss     ) +     scale_y_continuous(         name = expression(bold(             dot(V)*O['2']~~'|'~~dot(V)*CO['2']~'('*L%.%min^'-1'*')'         )),         expand = expansion(mult = 0)     ) +     scale_colour_manual(         name = NULL,         aesthetics = c(\"colour\", \"fill\"),         values = setNames(palette_epl()[c(6, 5)], c(\"VO2\", \"VCO2\")),     ) +     guides(         colour = guide_legend(override.aes = list(             linewidth = 1, alpha = 1         ))     ) +     geom_area(aes(y = VO2, colour = \"VO2\", fill = \"VO2\"),                alpha = 0.1, key_glyph = \"path\") +     geom_line(aes(y = VCO2, colour = \"VCO2\")) +     geom_point(data = peak_data, aes(x = TIME, y = VO2),                size = 4, shape = 21, stroke = 1) scales::show_col(palette_epl())"},{"path":"https://jemarnold.github.io/epl/index.html","id":"to-do-as-of-020","dir":"","previous_headings":"","what":"To do (as of 0.2.0)","title":"Functions and Scripts for the UBC Environmental Physiology Laboratory","text":"Add digital filtering methods (e.g. Butterworth, smoothing spline, simple moving average, binning). Update EPL Parvo App. Create vignette main package usage. Update read_tymewear() method “tymepost” export file type. Add 4-parameter monoexponential curve fitting via nls() self-starting functions. Add mean peak value detection, .e. V̇O2peak. Add template display theme ggplot2 plotting. Add local outlier filtering metabolic data.","code":""},{"path":"https://jemarnold.github.io/epl/reference/between.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect if numeric values fall between a range — between","title":"Detect if numeric values fall between a range — between","text":"Vectorised inclusive within x >= left & x <= right, exclusive x > left & x < right. side can specified separately.","code":""},{"path":"https://jemarnold.github.io/epl/reference/between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect if numeric values fall between a range — between","text":"","code":"between(x, left, right, inclusive = c(\"left\", \"right\"))"},{"path":"https://jemarnold.github.io/epl/reference/between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect if numeric values fall between a range — between","text":"x numeric vector. left, right Numeric boundary values. left right recycled size x. inclusive character vector specify left /right boundary values included range, (default), excluded FALSE.","code":""},{"path":"https://jemarnold.github.io/epl/reference/between.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect if numeric values fall between a range — between","text":"logical vector length x.","code":""},{"path":"https://jemarnold.github.io/epl/reference/between.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect if numeric values fall between a range — between","text":"inclusive = FALSE can used test positive non-zero values: (x, 0, Inf, inclusive = FALSE).","code":""},{"path":[]},{"path":"https://jemarnold.github.io/epl/reference/breaks_timespan.html","id":null,"dir":"Reference","previous_headings":"","what":"Breaks for Timespan Data — breaks_timespan","title":"Breaks for Timespan Data — breaks_timespan","text":"Pretty timespan breaks plotting units 5, 15, 30, 60 sec, etc. Modified scales::breaks_timespan().","code":""},{"path":"https://jemarnold.github.io/epl/reference/breaks_timespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breaks for Timespan Data — breaks_timespan","text":"","code":"breaks_timespan(unit = c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\"), n = 5)"},{"path":"https://jemarnold.github.io/epl/reference/breaks_timespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breaks for Timespan Data — breaks_timespan","text":"unit time unit used interpret numeric data input (defaults \"secs\"). n Desired number breaks. may get slightly fewer breaks requested.","code":""},{"path":"https://jemarnold.github.io/epl/reference/breaks_timespan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breaks for Timespan Data — breaks_timespan","text":"Returns function generating breaks.","code":""},{"path":"https://jemarnold.github.io/epl/reference/breaks_timespan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breaks for Timespan Data — breaks_timespan","text":"","code":"if (FALSE) { # \\dontrun{ x = 0:120 y = sin(2 * pi * x / 15) + rnorm(length(x), 0, 0.2) ggplot(data.frame(x, y)) +     aes(x = x, y = y) +     scale_x_continuous(breaks = breaks_timespan()) +     geom_line() } # }"},{"path":"https://jemarnold.github.io/epl/reference/epl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epl: Functions and Scripts for the UBC Environmental Physiology Laboratory — epl-package","title":"epl: Functions and Scripts for the UBC Environmental Physiology Laboratory — epl-package","text":"repository functions scripts common tasks use students UBC Environmental Physiology Laboratory.","code":""},{"path":[]},{"path":"https://jemarnold.github.io/epl/reference/epl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epl: Functions and Scripts for the UBC Environmental Physiology Laboratory — epl-package","text":"Maintainer: Jem Arnold jem.arnold@ubc.ca","code":""},{"path":"https://jemarnold.github.io/epl/reference/example_epl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to EPL example files — example_epl","title":"Get path to EPL example files — example_epl","text":"Get path EPL example files","code":""},{"path":"https://jemarnold.github.io/epl/reference/example_epl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to EPL example files — example_epl","text":"","code":"example_epl(file = NULL)"},{"path":"https://jemarnold.github.io/epl/reference/example_epl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to EPL example files — example_epl","text":"file Name file character string. kept NULL, returns vector available files.","code":""},{"path":"https://jemarnold.github.io/epl/reference/example_epl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to EPL example files — example_epl","text":"File paths selected example files stored package.","code":""},{"path":"https://jemarnold.github.io/epl/reference/example_epl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to EPL example files — example_epl","text":"","code":"## lists all files example_epl() #> [1] \"parvo_binned.CSV\"  \"parvo_bxb.CSV\"     \"parvo_ramp.CSV\"    #> [4] \"tymewear_live.csv\" \"tymewear_post.csv\"  ## partial matching will error if matches multiple ## example_epl(\"tymewear\") #> Error in `example_epl()`: #> ! Multiple files match \"tymewear\": #> ℹ Matching files: \"tymewear_live.csv\" and \"tymewear_post.csv\"  example_epl(\"tymewear_live\") #> [1] \"/home/runner/work/_temp/Library/epl/extdata/tymewear_live.csv\""},{"path":"https://jemarnold.github.io/epl/reference/find_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find peak values from rows within a given timespan — find_peaks","title":"Find peak values from rows within a given timespan — find_peaks","text":"Detects peak values y column within span x column (e.g. timespan), returns mean columns within rows.","code":""},{"path":"https://jemarnold.github.io/epl/reference/find_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find peak values from rows within a given timespan — find_peaks","text":"","code":"find_peaks(data, x, y, span = 30, between = NULL)"},{"path":"https://jemarnold.github.io/epl/reference/find_peaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find peak values from rows within a given timespan — find_peaks","text":"data data frame least numeric x y columns. x character string column name x (e.g. \"time\". Must match column name exactly. y character string column name y (e.g. \"VO2\". Must match column name exactly. span numeric value defining timespan calculate rolling local means, peak values taken. span = 0 take single highest sample. optional time range form c(min, max) units x, within look peak values (inclusive).","code":""},{"path":"https://jemarnold.github.io/epl/reference/find_peaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find peak values from rows within a given timespan — find_peaks","text":"tibble one row mean values columns across peak-detected rows. Samples column shows number samples within timespan.","code":""},{"path":"https://jemarnold.github.io/epl/reference/find_peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find peak values from rows within a given timespan — find_peaks","text":"function uses rolling window approach: non-NA value y, calculates mean y within window time t t + span. Identifies window maximum mean value y. Extracts rows columns within peak window. Returns mean numeric columns (first value non-numeric columns) within peak window.","code":""},{"path":"https://jemarnold.github.io/epl/reference/find_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find peak values from rows within a given timespan — find_peaks","text":"","code":"parvo_data <- read_parvo(example_epl(\"parvo_ramp\"))$data  ## Find peak 30-second VO2 find_peaks(parvo_data, x = \"TIME\", y = \"VO2\", span = 30) #> # A tibble: 1 × 25 #>   samples  TIME    HR VO2kg   VO2  VCO2   RER    RR    Vt    VE VEVO2 VEVCO2 #>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1       1 2670.    47  50.5  3.69  4.17  1.13  36.7  3.23  97.4  32.1   28.4 #> # ℹ 13 more variables: FEO2 <dbl>, FECO2 <dbl>, FATmin <dbl>, CHOmin <dbl>, #> #   FatOx <dbl>, CarbOx <dbl>, O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, #> #   O2energy <dbl>, O2power <dbl>, O2pulse <dbl>, METS <dbl>  ## search within specific time range find_peaks(parvo_data, x = \"TIME\", y = \"VO2\", span = 60, between = c(1500, 2000)) #> # A tibble: 1 × 25 #>   samples  TIME    HR VO2kg   VO2  VCO2   RER    RR    Vt    VE VEVO2 VEVCO2 #>     <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #> 1       2 1755.   222  49.3  3.61  4.09  1.13  44.4  2.92  106.  35.9   31.6 #> # ℹ 13 more variables: FEO2 <dbl>, FECO2 <dbl>, FATmin <dbl>, CHOmin <dbl>, #> #   FatOx <dbl>, CarbOx <dbl>, O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, #> #   O2energy <dbl>, O2power <dbl>, O2pulse <dbl>, METS <dbl>"},{"path":"https://jemarnold.github.io/epl/reference/format_hmmss.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Timespan Data as ","title":"Format Timespan Data as ","text":"Convert numeric timespan data h:mm:ss format pretty plotting. Modified ggplot2::scale_x_time().","code":""},{"path":"https://jemarnold.github.io/epl/reference/format_hmmss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Timespan Data as ","text":"","code":"format_hmmss(x)"},{"path":"https://jemarnold.github.io/epl/reference/format_hmmss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Timespan Data as ","text":"x numeric vector.","code":""},{"path":"https://jemarnold.github.io/epl/reference/format_hmmss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Timespan Data as ","text":"character vector length x.","code":""},{"path":"https://jemarnold.github.io/epl/reference/format_hmmss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format Timespan Data as ","text":"values less 3600 (1 hour), format returned mm:ss. value greater 3600, format returned h:mm:ss leading zeroes.","code":""},{"path":"https://jemarnold.github.io/epl/reference/format_hmmss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Timespan Data as ","text":"","code":"if (FALSE) { # \\dontrun{ x = 0:120 y = sin(2 * pi * x / 15) + rnorm(length(x), 0, 0.2) ggplot(data.frame(x, y)) +     aes(x = x, y = y) +     scale_x_continuous(         breaks = breaks_timespan(),         labels = format_hmmss     ) +     geom_line() } # }"},{"path":"https://jemarnold.github.io/epl/reference/palette_epl.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom EPL colour palette — palette_epl","title":"Custom EPL colour palette — palette_epl","text":"Custom EPL colour palette","code":""},{"path":"https://jemarnold.github.io/epl/reference/palette_epl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom EPL colour palette — palette_epl","text":"","code":"palette_epl(n = NULL)"},{"path":"https://jemarnold.github.io/epl/reference/palette_epl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom EPL colour palette — palette_epl","text":"n character numeric vector specifying either name number order colours return.","code":""},{"path":"https://jemarnold.github.io/epl/reference/palette_epl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom EPL colour palette — palette_epl","text":"Named unnamed character vector hex colours.","code":""},{"path":[]},{"path":"https://jemarnold.github.io/epl/reference/palette_epl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom EPL colour palette — palette_epl","text":"","code":"if (FALSE) { # \\dontrun{ scales::show_col(palette_epl()) scales::show_col(palette_epl(2)) scales::show_col(palette_epl(c(\"red\", \"orange\"))) } # }"},{"path":"https://jemarnold.github.io/epl/reference/palette_parvo.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Parvo colour palette — palette_parvo","title":"Custom Parvo colour palette — palette_parvo","text":"Custom Parvo colour palette","code":""},{"path":"https://jemarnold.github.io/epl/reference/palette_parvo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Parvo colour palette — palette_parvo","text":"","code":"palette_parvo(...)"},{"path":"https://jemarnold.github.io/epl/reference/palette_parvo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Parvo colour palette — palette_parvo","text":"... character string specifying named colour(s) return.","code":""},{"path":"https://jemarnold.github.io/epl/reference/palette_parvo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Parvo colour palette — palette_parvo","text":"Named character vector hex colours.","code":""},{"path":[]},{"path":"https://jemarnold.github.io/epl/reference/palette_parvo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Parvo colour palette — palette_parvo","text":"","code":"if (FALSE) { # \\dontrun{ scales::show_col(palette_parvo()) scales::show_col(palette_parvo(\"VO2\", \"VCO2\", \"RER\", \"VEVO2\")) } # }"},{"path":"https://jemarnold.github.io/epl/reference/parvo_binned.html","id":null,"dir":"Reference","previous_headings":"","what":"Parvo 15-sec binned export of cycling interval workout — parvo_binned","title":"Parvo 15-sec binned export of cycling interval workout — parvo_binned","text":".CSV file exported Parvo Medics TrueOne 2400 metabolic cart 15-sec binned average ventilation gas exchange data 5x 5-minute cycling interval workout.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_binned.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parvo 15-sec binned export of cycling interval workout — parvo_binned","text":"raw .CSV file metadata primary data table 16 columns 179 rows.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_binned.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parvo 15-sec binned export of cycling interval workout — parvo_binned","text":"Session records 5x 5-min cycling interval workout participant alternating body position upright training position (\"\") aerodynamic racing position (\"RP\") work bout. Work bout Borg RPE 14-15. session recorded simultaneously Parvo Tymewear. Parvo file start time accurate within 1 sec (± 0.5 sec precision). However, Tymewear timestamps accurate, inconsistent due current issue recording app. Interval start stop events recorded, along manually identified cadence participant-reported Borg RPE. Heart rate data valid.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_bxb.html","id":null,"dir":"Reference","previous_headings":"","what":"Parvo breath-by-breath export of cycling interval workout — parvo_bxb","title":"Parvo breath-by-breath export of cycling interval workout — parvo_bxb","text":".CSV file exported Parvo Medics TrueOne 2400 metabolic cart breath--breath ventilation gas exchange data 5x 5-minute cycling interval workout.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_bxb.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parvo breath-by-breath export of cycling interval workout — parvo_bxb","text":"raw .CSV file metadata primary data table 16 columns 1056 rows.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_bxb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parvo breath-by-breath export of cycling interval workout — parvo_bxb","text":"Session records 5x 5-min cycling interval workout participant alternating body position upright training position (\"\") aerodynamic racing position (\"RP\") work bout. Work bout Borg RPE 14-15. session recorded simultaneously Parvo Tymewear. Parvo file start time accurate within 1 sec (± 0.5 sec precision). However, Tymewear timestamps accurate, inconsistent due current issue recording app. Interval start stop events recorded, along manually identified cadence participant-reported Borg RPE. Parvo uses mixing chamber correct time delay ventilation recorded Pneumotach per breath, gas exchange breath recorded sample line. Therefore, valid use raw ventilation values exported breath--breath. Breath--breath gas exchange values valid without additional correction processing. Heart rate data valid.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_ramp.html","id":null,"dir":"Reference","previous_headings":"","what":"Parvo 30-sec binned export of maximal graded cycling assessment — parvo_ramp","title":"Parvo 30-sec binned export of maximal graded cycling assessment — parvo_ramp","text":".CSV file exported Parvo Medics TrueOne 2400 metabolic cart 30-sec binned average ventilation gas exchange data submaximal graded step test maximal incremental ramp V̇O~2~peak.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_ramp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parvo 30-sec binned export of maximal graded cycling assessment — parvo_ramp","text":"raw .CSV file metadata primary data table 15 columns 91 rows.","code":""},{"path":"https://jemarnold.github.io/epl/reference/parvo_ramp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parvo 30-sec binned export of maximal graded cycling assessment — parvo_ramp","text":"Session records submaximal graded step test starting 100 W increasing 50 W per 5-min stage maximum task tolerance. Followed maximal incremental ramp V̇O~2~. Heart rate data valid.","code":""},{"path":"https://jemarnold.github.io/epl/reference/preserve_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Preserve and Restore NA Information Within a Vector — preserve_na","title":"Preserve and Restore NA Information Within a Vector — preserve_na","text":"preserve_na() stores NA vector positions extracts valid non-NA values later restoration restore_na(). restore_na() restores NA values original vector positions processing valid non-NA values returned preserve_na().","code":""},{"path":"https://jemarnold.github.io/epl/reference/preserve_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preserve and Restore NA Information Within a Vector — preserve_na","text":"","code":"preserve_na(x)  restore_na(y, na_info)"},{"path":"https://jemarnold.github.io/epl/reference/preserve_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preserve and Restore NA Information Within a Vector — preserve_na","text":"x vector containing missing NA values. y vector valid non-NA values returned preserve_na(). na_info list returned preserve_na().","code":""},{"path":"https://jemarnold.github.io/epl/reference/preserve_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preserve and Restore NA Information Within a Vector — preserve_na","text":"preserve_na() returns list na_info components: na_info$x_valid: vector NA values removed. na_info$x_length: numeric value original input vector length. na_info$na_idx: logical vector preserving NA positions. restore_na() returns vector y length original input vector x NA values restored original positions.","code":""},{"path":"https://jemarnold.github.io/epl/reference/preserve_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preserve and Restore NA Information Within a Vector — preserve_na","text":"","code":"if (FALSE) { # \\dontrun{ x <- c(1, NA, 3, NA, 5) na_info <- preserve_na(x) ## process with a function that would normally fail on NA y <- na_info$x_valid * 2 result <- restore_na(y, na_info) result  x <- c(\"A\", NA, \"B\", NA, \"C\") na_info <- preserve_na(x) ## process with a function that would normally fail on NA y <- tolower(na_info$x_valid) result <- restore_na(y, na_info) result } # }"},{"path":"https://jemarnold.github.io/epl/reference/read_parvo.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Parvo Exported CSV Data — read_parvo","title":"Read Parvo Exported CSV Data — read_parvo","text":"Read .CSV .xlsx (.XLS) files exported Parvo Medics TrueOne 2400 return list three data frames recorded data, file details, events.","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_parvo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Parvo Exported CSV Data — read_parvo","text":"","code":"read_parvo(file_path, add_timestamp = FALSE, ...)"},{"path":"https://jemarnold.github.io/epl/reference/read_parvo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Parvo Exported CSV Data — read_parvo","text":"file_path file path character string, including .csv .xlsx file type. add_timestamp logical add \"timestamp\" column data table date-time values, useful synchronisation recordings time day. Precise ± 0.5 seconds. ... Additional arguments (currently used).","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_parvo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Parvo Exported CSV Data — read_parvo","text":"list three tibbles. parvo$data contains data table. parvo$details contains file metadata. parvo$events contains manual event inputs.","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_parvo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Parvo Exported CSV Data — read_parvo","text":"function can parse .CSV files exported directly Parvo metabolic cart. .XLS exported Parvo obsolete file format read. must re-saved .xlsx reading function. Data exported channels (e.g. c(\"VO2\", \"VCO2\", \"Vt\")) exported -. Additional data columns calculated required exported data present. energetic calculations derived Peronnet & Massicotte, 1991. Table nonprotein respiratory quotient: update. include: FatOx CarbOx respective substrate oxidation rates g/min. O2kJ O2kcal energy equivalents oxygen kJ/L kcal/L (kilojoules kilocalories per litre VO2), respectively. O2work, O2power, O2energy aerobic metabolic work expenditure, energy expenditure, power output kJ/min, kcal/min, W (kilojoules per minute, kilocalories per minute, joules per second), respectively. O2pulse ratio VO2 heart rate (HR) ml/min/bpm (millilitres VO2 per heart beat). Economy ratio oxygen cost work, W/L/min (external power output watts per litre per minute VO2) GE (gross efficiency) ratio external work internal metabolic work, percent, accounting VO2 substrate oxidation (RER). METS (metabolic equivalent task) deprecated method estimating oxygen cost common physically active tasks adjusted body mass, relative resting metabolic rate (approximately 3.5 mL/kg/min), calculated VO2kg / 3.5.","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_parvo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Parvo Exported CSV Data — read_parvo","text":"","code":"## retrieve example parvo file file_path <- example_epl(\"parvo_binned\")  parvo <- read_parvo(file_path, add_timestamp = TRUE) parvo #> $data #> # A tibble: 179 × 26 #>     TIME timestamp              HR VO2kg   VO2  VCO2   RER    RR    Vt    VE #>    <dbl> <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  18.1 2025-10-23 10:50:23     0  5.69 0.404 0.419 1.04   13.3 1.11  12.1  #>  2  31.5 2025-10-23 10:50:36     0  6.80 0.483 0.484 1.00   17.8 0.993 14.5  #>  3  49.5 2025-10-23 10:50:54   107  6.08 0.432 0.448 1.04   10.0 1.66  13.6  #>  4  62.5 2025-10-23 10:51:07   107  4.06 0.288 0.321 1.11   13.8 0.816  9.27 #>  5  77.5 2025-10-23 10:51:22   107  8.61 0.611 0.648 1.06   16.0 1.28  16.8  #>  6  94.9 2025-10-23 10:51:39   107  7.52 0.534 0.528 0.990  13.8 1.15  13.0  #>  7 107.  2025-10-23 10:51:51   107  6.80 0.483 0.514 1.06   15.0 1.10  13.6  #>  8 123.  2025-10-23 10:52:08   107  5.94 0.422 0.454 1.08   11.2 1.33  12.2  #>  9 138.  2025-10-23 10:52:23   107  2.47 0.175 0.186 1.06   16.0 0.392  5.13 #> 10 153.  2025-10-23 10:52:37   107  3.92 0.278 0.294 1.06   12.1 0.845  8.42 #> # ℹ 169 more rows #> # ℹ 16 more variables: VEVO2 <dbl>, VEVCO2 <dbl>, FEO2 <dbl>, FECO2 <dbl>, #> #   FATmin <dbl>, CHOmin <dbl>, Breath <dbl>, FatOx <dbl>, CarbOx <dbl>, #> #   O2kJ <dbl>, O2kcal <dbl>, O2work <dbl>, O2energy <dbl>, O2power <dbl>, #> #   O2pulse <dbl>, METS <dbl> #>  #> $details #> # A tibble: 1 × 16 #>   Date             Name  Sex     Age Height Weight `Insp. temp` `Baro. pressure` #>   <chr>            <chr> <chr> <dbl>  <dbl>  <dbl>        <dbl>            <dbl> #> 1 2025-10-23 10:5… TW02  Male      0    176     71         23.6             755. #> # ℹ 8 more variables: `Insp. humidity` <dbl>, `STPD to BTPS` <dbl>, #> #   `O2 Gain` <dbl>, `CO2 Gain` <dbl>, `Base O2` <dbl>, `Base CO2` <dbl>, #> #   `Measured O2` <dbl>, `Measured CO2` <dbl> #>  #> $events #> # A tibble: 23 × 2 #>     TIME Events         #>    <dbl> <chr>          #>  1   240 Start Exercise #>  2   240 UP1 265W       #>  3   540 Stop Exercise  #>  4   540 Cadence 95     #>  5   900 Start Exercise #>  6   900 RP2 265W       #>  7  1200 Stop Exercise  #>  8  1200 RPE 6-20 15    #>  9  1200 Cadence 95     #> 10  1440 Start Exercise #> # ℹ 13 more rows #>"},{"path":"https://jemarnold.github.io/epl/reference/read_tymewear.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Tymewear Exported CSV Data — read_tymewear","title":"Read Tymewear Exported CSV Data — read_tymewear","text":"Read \"Live Processed CSV\" \"Post Processed CSV\" files exported Tymewear VitalPro return list two data frames recorded data file details","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_tymewear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Tymewear Exported CSV Data — read_tymewear","text":"","code":"read_tymewear(file_path, ...)  # S3 method for class 'live' read_tymewear(file_path, ...)  # S3 method for class 'post' read_tymewear(file_path, ...)"},{"path":"https://jemarnold.github.io/epl/reference/read_tymewear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Tymewear Exported CSV Data — read_tymewear","text":"file_path file path character string, including .csv file type. ... Additional arguments passed read_tymewear.","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_tymewear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Tymewear Exported CSV Data — read_tymewear","text":"list two tibbles. tymelive$data contains data table. tymelive$details contains file metadata.","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_tymewear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Tymewear Exported CSV Data — read_tymewear","text":"generic function detects Tymewear exported file type searching top file recognisable column data belonging either \"tymewear.live\" \"tymewear.post\", read import resulting file.","code":""},{"path":"https://jemarnold.github.io/epl/reference/read_tymewear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Tymewear Exported CSV Data — read_tymewear","text":"","code":"## retrieve example tymewear file file_path <- example_epl(\"tymewear_live\")  tyme <- read_tymewear(file_path) tyme #> $data #> # A tibble: 1,083 × 5 #>     time timestamp              br    vt    ve #>    <dbl> <dttm>              <dbl> <dbl> <dbl> #>  1  0    2025-10-23 10:50:11  12.7  1.35    17 #>  2  4.14 2025-10-23 10:50:15  14.9  1.35    20 #>  3  7.95 2025-10-23 10:50:18  15    1.05    16 #>  4 13.0  2025-10-23 10:50:24  13.8  2.4     33 #>  5 17.2  2025-10-23 10:50:28  13.3  1.11    15 #>  6 21.2  2025-10-23 10:50:32  12.8  1.63    21 #>  7 25.7  2025-10-23 10:50:36  13    3.61    47 #>  8 33.9  2025-10-23 10:50:44  11.9  5.88    70 #>  9 39.3  2025-10-23 10:50:50   8    1.14     9 #> 10 44.7  2025-10-23 10:50:55  10    2.21    22 #> # ℹ 1,073 more rows #>  #> $details #> # A tibble: 60 × 2 #>    parameter     value    #>    <chr>         <chr>    #>  1 Info Section  \"\"       #>  2 type          \"0\"      #>  3 stages        \"[]\"     #>  4 gender        \"Female\" #>  5 weight        \"64.0\"   #>  6 weight_units  \"SI\"     #>  7 activity-name \"TW02\"   #>  8 f_v           \"1.0\"    #>  9 activity-type \"0\"      #> 10 sport         \"2\"      #> # ℹ 50 more rows #>"},{"path":"https://jemarnold.github.io/epl/reference/replace_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Local Outliers — replace_outliers","title":"Replace Local Outliers — replace_outliers","text":"Detects local outliers vector data Hampel filter using median absolute deviation (MAD), replaces NA local median value.","code":""},{"path":"https://jemarnold.github.io/epl/reference/replace_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Local Outliers — replace_outliers","text":"","code":"replace_outliers(x, width, method = c(\"median\", \"NA\"), t0 = 3)"},{"path":"https://jemarnold.github.io/epl/reference/replace_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Local Outliers — replace_outliers","text":"x numeric vector. width integer defining sample window detect local outliers. window = -width < idx < width. method character string indicating handle replacement (see Details method): \"median\" Replaces outliers median within locally centred window defined either width (default). \"NA\" Replaces outliers NA. t0 integer local outlier threshold. Default t0 = 3 (Pearson's rule; analogous 3σ rule).","code":""},{"path":"https://jemarnold.github.io/epl/reference/replace_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Local Outliers — replace_outliers","text":"numeric vector filtered data.","code":""},{"path":"https://jemarnold.github.io/epl/reference/replace_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace Local Outliers — replace_outliers","text":"default method = \"median\" replace outliers local median value, pracma::hampel(). Otherwise, method = \"NA\" replace outliers NA. function pass missing NA values input vector x. NA values x excluded processing restored returned vector, replaced local median value. high t0 threshold makes outlier filter forgiving, low one declare points outliers. t0 = 3 (default) corresponds Pearson's 3 sigma edit rule, t0 = 0 Tukey's median filter.","code":""},{"path":[]},{"path":"https://jemarnold.github.io/epl/reference/replace_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Local Outliers — replace_outliers","text":"","code":"tyme_data <- read_tymewear(example_epl(\"tymewear_live\"))$data vt_filtered <- replace_outliers(tyme_data$vt, width = 7, method = \"median\")  if (FALSE) { # \\dontrun{ ggplot(tyme_data) +     aes(x = time, y = vt) +     ylab(\"Tidal Volume (L)\") +     scale_x_continuous(         name = \"Time (mm:ss)\",         breaks = breaks_timespan(),         labels = format_hmmss     ) +     scale_colour_epl() +     geom_line(aes(colour = \"BR\")) +     geom_point(         data = slice(tyme_data, which(vt_filtered != vt)),         aes(y = vt, colour = \"outliers\")     ) } # }"},{"path":"https://jemarnold.github.io/epl/reference/scale_colour_epl.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales for custom EPL palette — scale_colour_epl","title":"Scales for custom EPL palette — scale_colour_epl","text":"Scales custom EPL palette","code":""},{"path":"https://jemarnold.github.io/epl/reference/scale_colour_epl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales for custom EPL palette — scale_colour_epl","text":"","code":"scale_colour_epl(..., aesthetics = \"colour\")  scale_color_epl(..., aesthetics = \"color\")  scale_fill_epl(..., aesthetics = \"fill\")"},{"path":"https://jemarnold.github.io/epl/reference/scale_colour_epl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales for custom EPL palette — scale_colour_epl","text":"... Arguments passed ggplot2::discrete_scale(). aesthetics character vector aesthetic(s) passed ggplot2::discrete_scale(). Default \"colour\".","code":""},{"path":"https://jemarnold.github.io/epl/reference/scale_colour_epl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales for custom EPL palette — scale_colour_epl","text":"ggplot2 scale object.","code":""},{"path":[]},{"path":"https://jemarnold.github.io/epl/reference/theme_epl.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom EPL ggplot2 theme — theme_epl","title":"Custom EPL ggplot2 theme — theme_epl","text":"ggplot2 theme display.","code":""},{"path":"https://jemarnold.github.io/epl/reference/theme_epl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom EPL ggplot2 theme — theme_epl","text":"","code":"theme_epl(   base_size = 14,   base_family = \"sans\",   border = c(\"partial\", \"full\"),   ink = \"black\",   paper = \"white\",   accent = \"#0080ff\",   ... )"},{"path":"https://jemarnold.github.io/epl/reference/theme_epl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom EPL ggplot2 theme — theme_epl","text":"base_size Base font size, given pts. base_family Base font family. border Define either partial full border around plots. ink Colour text lines. Default \"black\". paper Background colour. Default \"white\". accent Accent colour highlights. Default \"#0080ff\". ... Additional arguments add theme().","code":""},{"path":"https://jemarnold.github.io/epl/reference/theme_epl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom EPL ggplot2 theme — theme_epl","text":"ggplot2 object.","code":""},{"path":"https://jemarnold.github.io/epl/reference/theme_epl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom EPL ggplot2 theme — theme_epl","text":"axis.title = element_text(face = \"bold\") default. Modify \"plain\". panel.grid.major & panel.grid.major set blank. Modify = element_line() visible grid lines. legend.position = \"top\" default. Modify \"none\" remove legend entirely. border = \"partial\" uses panel.border = element_blank() axis.line = element_line(). border = \"full\" uses panel.border = element_rect(colour = \"black\", linewidth = 1) axis.line = element_line(). base_family = \"sans\" default. \"Merriweather Sans\" nice alternative font can installed https://fonts.google.com/specimen/Merriweather+Sans.","code":""},{"path":[]},{"path":"https://jemarnold.github.io/epl/reference/theme_epl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom EPL ggplot2 theme — theme_epl","text":"","code":"if (FALSE) { # \\dontrun{ ## set theme for the current script theme_set(theme_epl())  ## plot example data read_tymewear(example_epl(\"tymewear_live\"))$data |>     ggplot() +     aes(x = time) +     scale_colour_epl(name = NULL) +     ylab(\"Ventilation Measures\") +     scale_x_continuous(         name = \"Time (mm:ss)\",         breaks = breaks_timespan(),         labels = format_hmmss     ) +     geom_line(aes(y = br, colour = \"BR\")) +     geom_line(aes(y = ve, colour = \"VE\")) } # }"},{"path":"https://jemarnold.github.io/epl/reference/tymewear_live.html","id":null,"dir":"Reference","previous_headings":"","what":"Tymewear breath-by-breath sample export of cycling interval workout — tymewear_live","title":"Tymewear breath-by-breath sample export of cycling interval workout — tymewear_live","text":".csv file exported Tymewear VitalPro chest strap breath--breath export ventilation data 5x 5-minute cycling interval workout.","code":""},{"path":"https://jemarnold.github.io/epl/reference/tymewear_live.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tymewear breath-by-breath sample export of cycling interval workout — tymewear_live","text":"raw .csv file metadata primary data table 9 columns 1083 rows.","code":""},{"path":"https://jemarnold.github.io/epl/reference/tymewear_live.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tymewear breath-by-breath sample export of cycling interval workout — tymewear_live","text":"Session records 5x 5-min cycling interval workout participant alternating body position upright training position (\"\") aerodynamic racing position (\"RP\") work bout. Work bout Borg RPE 14-15. session recorded simultaneously Parvo Tymewear. Parvo file start time accurate within 1 sec (± 0.5 sec precision). Tymewear \"live\" sample timestamps accurate, however timestamps \"live\" \"post\" file metadata accurate due current issue recording app. Heart rate, cycling power, cadence, speed exported Monarch cycle ergometer Tymewear \"live\" file wide format bottom file.","code":""},{"path":"https://jemarnold.github.io/epl/reference/tymewear_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Tymewear time series and breath-by-breath sample export of cycling interval workout — tymewear_post","title":"Tymewear time series and breath-by-breath sample export of cycling interval workout — tymewear_post","text":".csv file exported Tymewear VitalPro chest strap 1 Hz time series breath--breath export ventilation data 5x 5-minute cycling interval workout.","code":""},{"path":"https://jemarnold.github.io/epl/reference/tymewear_post.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tymewear time series and breath-by-breath sample export of cycling interval workout — tymewear_post","text":"raw .csv file metadata primary data table 31 columns 2942 rows.","code":""},{"path":"https://jemarnold.github.io/epl/reference/tymewear_post.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tymewear time series and breath-by-breath sample export of cycling interval workout — tymewear_post","text":"Session records 5x 5-min cycling interval workout participant alternating body position upright training position (\"\") aerodynamic racing position (\"RP\") work bout. Work bout Borg RPE 14-15. session recorded simultaneously Parvo Tymewear. Parvo file start time accurate within 1 sec (± 0.5 sec precision). Tymewear \"post\" start time accurate due current issue recording app. Sample timestamps Tymewear \"live\" file accurate. Tymewear \"post\" file contains two data tables: right time series data ventilatory performance variables exported 1 Hz (1 second samples). left breath--breath samples ventilation data. Heart rate, cycling power, cadence, speed exported Monarch cycle ergometer 1 Hz time series columns.","code":""},{"path":"https://jemarnold.github.io/epl/news/index.html","id":"epl-021","dir":"Changelog","previous_headings":"","what":"epl 0.2.1","title":"epl 0.2.1","text":"Attempt fix failing R-CMD-check","code":""},{"path":"https://jemarnold.github.io/epl/news/index.html","id":"epl-020","dir":"Changelog","previous_headings":"","what":"epl 0.2.0","title":"epl 0.2.0","text":"Create replace_outliers() detect replace local outliers NA local median value. Create find_peaks() detect peak values within given timespan, e.g. finding 30-second V̇O2peak. Create theme_epl() ggplot2 helper functions pretty plotting. Create data.R documentation included example files retrievable example_epl(). Remove time_column argument read_parvo() since far can tell time column always “TIME”. Website documentation available , including function reference index vignettes. Write custom Reference/Index package documentation available . Create “Reading Cleaning Data” vignette common usage functions. Available . Re-write simplified README pointing vignette details. Update test_that new functions.","code":""},{"path":"https://jemarnold.github.io/epl/news/index.html","id":"epl-010-internal-release","dir":"Changelog","previous_headings":"","what":"epl 0.1.0 internal release","title":"epl 0.1.0 internal release","text":"Initial internal release development version. read_parvo() reading data exported “Parvo TrueOne” metabolic cart. currently method available “live” file export. example_epl() retrieving example data files test read process functions. Undocumented internal validation & helper functions helpers.R. Basic README demonstrate usage current three exported functions. Unit tests exported functions.","code":""}]
